from fastapi import FastAPI, HTTPException, Request, Form, Depends
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from pydantic import BaseModel
import sqlite3
from typing import List

app = FastAPI()

DATABASE_URL = "./test.db"

templates = Jinja2Templates(directory="templates")

class TodoItem(BaseModel):
    title: str
    description: str
    completed: bool

# Dependency to get DB connection
def get_db():
    conn = sqlite3.connect(DATABASE_URL)
    return conn

# Root endpoint to render HTML
@app.get("/", response_class=HTMLResponse)
def read_root(request: Request):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT * FROM todos")
    todos = c.fetchall()
    conn.close()
    return templates.TemplateResponse("index.html", {"request": request, "todos": todos})

# Create a new to-do item
@app.post("/add_todo", response_class=RedirectResponse)
def create_todo(title: str = Form(...), description: str = Form(...)):
    conn = get_db()
    c = conn.cursor()
    c.execute("INSERT INTO todos (title, description, completed) VALUES (?, ?, ?)", (title, description, False))
    conn.commit()
    conn.close()
    return RedirectResponse(url="/", status_code=303)

# Update an existing to-do item
@app.post("/update_todo/{todo_id}", response_class=RedirectResponse)
def update_todo(todo_id: int, title: str = Form(...), description: str = Form(...), completed: bool = Form(...)):
    conn = get_db()
    c = conn.cursor()
    c.execute("UPDATE todos SET title=?, description=?, completed=? WHERE id=?", (title, description, completed, todo_id))
    conn.commit()
    conn.close()
    return RedirectResponse(url="/", status_code=303)

# Delete a to-do item
@app.post("/delete_todo/{todo_id}", response_class=RedirectResponse)
def delete_todo(todo_id: int):
    conn = get_db()
    c = conn.cursor()
    c.execute("DELETE FROM todos WHERE id=?", (todo_id,))
    conn.commit()
    conn.close()
    return RedirectResponse(url="/", status_code=303)

# Search to-do items
@app.get("/search", response_class=HTMLResponse)
def search_todos(request: Request, query: str):
    conn = get_db()
    c = conn.cursor()
    c.execute("SELECT * FROM todos WHERE title LIKE ? OR description LIKE ?", ('%' + query + '%', '%' + query + '%'))
    todos = c.fetchall()
    conn.close()
    return templates.TemplateResponse("index.html", {"request": request, "todos": todos})
