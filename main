from fastapi import FastAPI, HTTPException, Request
from fastapi.responses import HTMLResponse, RedirectResponse
from pydantic import BaseModel
import sqlite3
from typing import List
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles

app = FastAPI()
templates = Jinja2Templates(directory="templates")

DATABASE_URL = "./test.db"

class TodoItem(BaseModel):
    id: int = None
    task: str
    completed: bool = False

@app.on_event("startup")
def startup():
    conn = sqlite3.connect(DATABASE_URL)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS todos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            task TEXT NOT NULL,
            completed BOOLEAN NOT NULL CHECK (completed IN (0, 1))
        )
    ''')
    conn.commit()
    conn.close()

@app.get("/", response_class=HTMLResponse)
def read_root(request: Request):
    conn = sqlite3.connect(DATABASE_URL)
    c = conn.cursor()
    c.execute("SELECT * FROM todos")
    todos = c.fetchall()
    conn.close()
    return templates.TemplateResponse("index.html", {"request": request, "todos": todos})

@app.post("/add_todo")
async def add_todo_task(request: Request):
    form = await request.form()
    task = form.get("task")
    conn = sqlite3.connect(DATABASE_URL)
    c = conn.cursor()
    try:
        c.execute("INSERT INTO todos (task, completed) VALUES (?, ?)", (task, False))
        conn.commit()
    except Exception as e:
        print(f"Error adding todo: {e}")
    conn.close()
    return RedirectResponse(url="/", status_code=303)

@app.post("/update_todo/{todo_id}")
async def update_todo_task(request: Request, todo_id: int):
    form = await request.form()
    task = form.get("task")
    conn = sqlite3.connect(DATABASE_URL)
    c = conn.cursor()
    try:
        c.execute("UPDATE todos SET task=? WHERE id=?", (task, todo_id))
        conn.commit()
    except Exception as e:
        print(f"Error updating todo: {e}")
    conn.close()
    return RedirectResponse(url="/", status_code=303)

@app.post("/delete_todo/{todo_id}")
async def delete_todo_task(todo_id: int):
    conn = sqlite3.connect(DATABASE_URL)
    c = conn.cursor()
    try:
        c.execute("DELETE FROM todos WHERE id=?", (todo_id,))
        conn.commit()
    except Exception as e:
        print(f"Error deleting todo: {e}")
    conn.close()
    return RedirectResponse(url="/", status_code=303)

@app.get("/search", response_class=HTMLResponse)
async def search_todos(request: Request, query: str = ""):
    conn = sqlite3.connect(DATABASE_URL)
    c = conn.cursor()
    try:
        c.execute("SELECT * FROM todos WHERE task LIKE ?", ('%' + query + '%',))
        todos = c.fetchall()
    except Exception as e:
        print(f"Error searching todos: {e}")
        todos = []
    conn.close()
    return templates.TemplateResponse("index.html", {"request": request, "todos": todos})
